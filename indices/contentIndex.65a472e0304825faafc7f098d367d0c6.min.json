{"/":{"title":"_index","content":"# test?","lastmodified":"2023-05-11T18:22:48.235080371Z","tags":[]},"/notes/config":{"title":"Configuration","content":"\n## Configuration\nQuartz is designed to be extremely configurable. You can find the bulk of the configuration scattered throughout the repository depending on how in-depth you'd like to get.\n\nThe majority of configuration can be found under `data/config.yaml`. An annotated example configuration is shown below.\n\n```yaml {title=\"data/config.yaml\"}\n# The name to display in the footer\nname: Jacky Zhao\n\n# whether to globally show the table of contents on each page\n# this can be turned off on a per-page basis by adding this to the\n# front-matter of that note\nenableToc: true\n\n# whether to by-default open or close the table of contents on each page\nopenToc: false\n\n# whether to display on-hover link preview cards\nenableLinkPreview: true\n\n# whether to render titles for code blocks\nenableCodeBlockTitle: true \n\n# whether to render copy buttons for code blocks\nenableCodeBlockCopy: true \n\n# whether to render callouts\nenableCallouts: true\n\n# whether to try to process Latex\nenableLatex: true\n\n# whether to enable single-page-app style rendering\n# this prevents flashes of unstyled content and improves\n# smoothness of Quartz. More info in issue #109 on GitHub\nenableSPA: true\n\n# whether to render a footer\nenableFooter: true\n\n# whether backlinks of pages should show the context in which\n# they were mentioned\nenableContextualBacklinks: true\n\n# whether to show a section of recent notes on the home page\nenableRecentNotes: false\n\n# whether to display an 'edit' button next to the last edited field\n# that links to github\nenableGitHubEdit: true\nGitHubLink: https://github.com/jackyzha0/quartz/tree/hugo/content\n\n# whether to render mermaid diagrams\nenableMermaid: true\n\n# whether to use Operand to power semantic search\n# IMPORTANT: replace this API key with your own if you plan on using\n# Operand search!\nsearch:\n  enableSemanticSearch: false\n  operandApiKey: \"REPLACE-WITH-YOUR-OPERAND-API-KEY\"\n  operandIndexId: \"REPLACE-WITH-YOUR-OPERAND-INDEX-ID\"\n\n# page description used for SEO\ndescription:\n  Host your second brain and digital garden for free. Quartz features extremely fast full-text search,\n  Wikilink support, backlinks, local graph, tags, and link previews.\n\n# title of the home page (also for SEO)\npage_title:\n  \"Pawlin docs\"\n\n# links to show in the footer\nlinks:\n  - link_name: Twitter\n    link: https://twitter.com/_jzhao\n  - link_name: Github\n    link: https://github.com/jackyzha0\n```\n\n### Code Block Titles\nTo add code block titles with Quartz:\n\n1. Ensure that code block titles are enabled in Quartz's configuration:\n\n    ```yaml {title=\"data/config.yaml\", linenos=false}\n    enableCodeBlockTitle: true\n    ```\n\n2. Add the `title` attribute to the desired [code block\n   fence](https://gohugo.io/content-management/syntax-highlighting/#highlighting-in-code-fences):\n\n      ```markdown {linenos=false}\n       ```yaml {title=\"data/config.yaml\"}\n       enableCodeBlockTitle: true  # example from step 1\n       ```\n      ```\n\n**Note** that if `{title=\u003cmy-title\u003e}` is included, and code block titles are not\nenabled, no errors will occur, and the title attribute will be ignored.\n\n### HTML Favicons\nIf you would like to customize the favicons of your Quartz-based website, you \ncan add them to the `data/config.yaml` file. The **default** without any set \n`favicon` key is:\n\n```html {title=\"layouts/partials/head.html\", linenostart=15}\n\u003clink rel=\"shortcut icon\" href=\"icon.png\" type=\"image/png\"\u003e\n```\n\nThe default can be overridden by defining a value to the `favicon` key in your \n`data/config.yaml` file. For example, here is a `List[Dictionary]` example format, which is\nequivalent to the default:\n\n```yaml {title=\"data/config.yaml\", linenos=false}\nfavicon:\n  - { rel: \"shortcut icon\", href: \"icon.png\", type: \"image/png\" }\n#  - { ... } # Repeat for each additional favicon you want to add\n```\n\nIn this format, the keys are identical to their HTML representations.\n\nIf you plan to add multiple favicons generated by a website (see list below), it\nmay be easier to define it as HTML. Here is an example which appends the \n**Apple touch icon** to Quartz's default favicon:\n\n```yaml {title=\"data/config.yaml\", linenos=false}\nfavicon: |\n  \u003clink rel=\"shortcut icon\" href=\"icon.png\" type=\"image/png\"\u003e\n  \u003clink rel=\"apple-touch-icon\" sizes=\"180x180\" href=\"/apple-touch-icon.png\"\u003e\n```\n\nThis second favicon will now be used as a web page icon when someone adds your \nwebpage to the home screen of their Apple device. If you are interested in more \ninformation about the current and past standards of favicons, you can read \n[this article](https://www.emergeinteractive.com/insights/detail/the-essentials-of-favicons/).\n\n**Note** that all generated favicon paths, defined by the `href` \nattribute, are relative to the `static/` directory.\n\n### Graph View\nTo customize the Interactive Graph view, you can poke around `data/graphConfig.yaml`.\n\n```yaml {title=\"data/graphConfig.yaml\"}\n# if true, a Global Graph will be shown on home page with full width, no backlink.\n# A different set of Local Graphs will be shown on sub pages.\n# if false, Local Graph will be default on every page as usual\nenableGlobalGraph: false\n\n### Local Graph ###\nlocalGraph:\n    # whether automatically generate a legend\n    enableLegend: false\n    \n    # whether to allow dragging nodes in the graph\n    enableDrag: true\n    \n    # whether to allow zooming and panning the graph\n    enableZoom: true\n    \n    # how many neighbours of the current node to show (-1 is all nodes)\n    depth: 1\n    \n    # initial zoom factor of the graph\n    scale: 1.2\n    \n    # how strongly nodes should repel each other\n    repelForce: 2\n\n    # how strongly should nodes be attracted to the center of gravity\n    centerForce: 1\n\n    # what the default link length should be\n    linkDistance: 1\n    \n    # how big the node labels should be\n    fontSize: 0.6\n    \n    # scale at which to start fading the labes on nodes\n    opacityScale: 3\n\n### Global Graph ###\nglobalGraph:\n\t# same settings as above\n\n### For all graphs ###\n# colour specific nodes path off of their path\npaths:\n  - /moc: \"#4388cc\"\n```\n\n\n## Styling\nWant to go even more in-depth? You can add custom CSS styling and change existing colours through editing `assets/styles/custom.scss`. If you'd like to target specific parts of the site, you can add ids and classes to the HTML partials in `/layouts/partials`. \n\n### Partials\nPartials are what dictate what gets rendered to the page. Want to change how pages are styled and structured? You can edit the appropriate layout in `/layouts`.\n\nFor example, the structure of the home page can be edited through `/layouts/index.html`. To customize the footer, you can edit `/layouts/partials/footer.html`\n\nMore info about partials on [Hugo's website.](https://gohugo.io/templates/partials/)\n\nStill having problems? Checkout our [FAQ and Troubleshooting guide](notes/troubleshooting.md).\n\n## Language Support\n[CJK + Latex Support (测试)](notes/CJK%20+%20Latex%20Support%20(测试).md) comes out of the box with Quartz.\n\nWant to support languages that read from right-to-left (like Arabic)? Hugo (and by proxy, Quartz) supports this natively.\n\nFollow the steps [Hugo provides here](https://gohugo.io/content-management/multilingual/#configure-languages) and modify your `config.toml`\n\nFor example:\n\n```toml\ndefaultContentLanguage = 'ar'\n[languages]\n  [languages.ar]\n    languagedirection = 'rtl'\n    title = 'مدونتي'\n    weight = 1\n```\n","lastmodified":"2023-05-11T18:22:48.251080641Z","tags":["setup"]},"/notes/images/Downloading-from-GoogleDrive":{"title":"Downloading from GoogleDrive","content":"Images storaging only for now (only for that clients which allow to download images from there houses. And not all images but 1 arhive per 5 min of shooting). And historic explicit data (till ~15 of February, 2023). \nStructure of storaging *-\n\n![[Pasted image 20230426113317.png]]\n![[Pasted image 20230426113327.png]]\n","lastmodified":"2023-05-11T18:22:48.251080641Z","tags":[]},"/notes/images/RD-computer-vision-or-data-science/computer-vision":{"title":"computer vision","content":"where raw images are required\n\nExamples of CV R\u0026D: \n- new chicken detector \n- new model/algorithm to build chicken masks \n- new features for which esimation images are required\n- algorithms for better floor determination \n- algorithms for image quality estimation \n","lastmodified":"2023-05-11T18:22:48.263080843Z","tags":[]},"/notes/images/RD-computer-vision-or-data-science/data-science":{"title":"data science","content":"where table data is enough (no need in raw images)\n\nExamples of DS R\u0026D: \n- new density/mass models epxeriments (new models architectures/new settings, extra features as input, extra data merging, new fomrats of data check)\n- extra features implementing into engine (where data storages in explicit files is enough - no need in raw images) \n- impact testing of new features","lastmodified":"2023-05-11T18:22:48.263080843Z","tags":[]},"/notes/images/data-checkbad-or-old-explicits":{"title":"data check(bad or old explicits)","content":"1. checking that the file really belongs to this cycle (checking for dates in the file)\n2. check for a broken file\n3. checking for empty lines in the file","lastmodified":"2023-05-11T18:22:48.263080843Z","tags":[]},"/notes/images/data-compression":{"title":"data compression","content":"Everything is compressed into parquet format, as it allows you to compress the original txt up to 10 times. + increases the speed of reading data from parquet (compared to txt). Plus some cleans are made here as well:\n1. Delete incomplete lines\n2. We bring the tables to the necessary types\n3. Removing duplicate hatters\n\n","lastmodified":"2023-05-11T18:22:48.263080843Z","tags":[]},"/notes/images/data-stroaging-on-servers":{"title":"data stroaging on servers","content":"## The way to the exclpicits\n\n\\\\\\\\Data chicken\\\\\\\\chicken\\\\\\\\RESULTS\\\\\\\\RESULTS_from_devices\\\\\\\\Anai\\\\\\\\Cycle 3\\\\\\\\House1140\\\\\\\\CGBRCV0004\\\\\\\\ForwardRunViz_explicit\n\n\n1. Datachicken - Server\n2. chickens - The shared folder of the chicken project\n3. RESULTS - Shared results folder\n4. RESULTS_from_devices - Folder of results from devices (there are also RESULTS_from_devices_spy - results from the spy engine on devices)\n5. Anai - farm\n6. Cycle 3 - Cycle\n7. House 1140 - House\n8. CGBRCV0004 - Device\n9. ForwardRunViz_explicit - Shared folder with explicits\n10. (not here, but you can go further along the way) explicits folders broken down by age\n![[Pasted image 20230421163755.png]]\n\n## Path to images\n\\\\\\\\\\\\\\\\Data chicken\\\\\\\\chicken\\\\\\\\DATA\\\\\\\\BIG\\\\\\\\Cycle 1\\\\\\\\Flock 1\\\\\\\\A03\\\\\\\\KXTHP0001\\\\\\\\output_2021_12_14_13_27_26_page_14\n1. Datachiken - Server\n2. chickens - The shared folder of the chicken project\n3. DATA - Shared with all downloaded images\n4. BIG - Farm\n5. Cycle 1 - Cycle\n6. Flock 1 - farm\n7. A03 - House\n8. KXTHP0001 - Device\n9. output_2021_12_14_13_27_26_age_14 - date and age\n \n\n![[Pasted image 20230421155114.png]]","lastmodified":"2023-05-11T18:22:48.263080843Z","tags":[]},"/notes/images/downloading-from-AWS":{"title":"downloading from AWS","content":"\nWhat is storaged on S3 (per each session): \n- explicit files\n- rolled files \n- rgb and depth image example (1 per session)\n- commands.fifo \n- Events/ folder \n- Mount_estimates_age_N.txt \n- mount_monitor_comps.txt\n- mount_monitor.jpg\n- PredictedWeights.txt\n  ![[Pasted image 20230426112755.png]]\n\n![[Pasted image 20230426112817.png]]\n","lastmodified":"2023-05-11T18:22:48.263080843Z","tags":[]},"/notes/images/engine-output-monitoring/cycle-normality-check":{"title":"cycle normality check","content":"(comparison with calibration data)  Comparing new data with calibration data using mahalanobis_report_simple.py (takes mahalanobis_report_config_simple.yaml fith choosen filters as input, and choosen fetures combinations)\nAllows to notice an anomalies with new data such volume/mass inversion and  geometry deviations. \n\nInput: PC results by particular engine folder, specialized filters (what exact client, farms, houses, cycles we want to check). \n\nWhat should be checked to understand that cycle is normal:\n-   [Volume, mass curve (how smooth and logic it is)](https://www.notion.so/FIELD-WORK-check-list-53d8ddaf9f5349979f7759cac3afc3c9)\n-   [Order of houses by volume should be same as by mass](https://www.notion.so/FIELD-WORK-check-list-53d8ddaf9f5349979f7759cac3afc3c9)\n-   [Estimated image quality (tilt, missing values)](https://www.notion.so/FIELD-WORK-check-list-53d8ddaf9f5349979f7759cac3afc3c9)\n-   [Difference between devices in one house](https://www.notion.so/FIELD-WORK-check-list-53d8ddaf9f5349979f7759cac3afc3c9)\n-   [Distributions (to check over filtration and overcorrection by models, compare with previous cycles – to understand if we’ve ever seen like that before)](https://www.notion.so/FIELD-WORK-check-list-53d8ddaf9f5349979f7759cac3afc3c9)\n-   [Images itself](https://www.notion.so/FIELD-WORK-check-list-53d8ddaf9f5349979f7759cac3afc3c9)\n-   Compare with scores from devices\n-   [Examples images](https://www.notion.so/FIELD-WORK-check-list-53d8ddaf9f5349979f7759cac3afc3c9)\n\n","lastmodified":"2023-05-11T18:22:48.263080843Z","tags":[]},"/notes/images/engine-output-monitoring/datapoints-preparation":{"title":"datapoints preparation","content":"It is used for creating datapoints based on PC scores with required mass mean per day. Generated datapoints will be uploaded to MongoDB manually and then sent to HQ and WebApp to demonstrate to client.   (Using skript generate_data_points_target_weight.py)","lastmodified":"2023-05-11T18:22:48.263080843Z","tags":[]},"/notes/images/engine-output-monitoring/distributions":{"title":"distributions","content":"checks allows to see average day distribution for features (especially for volume, also for day_average_density and mass_core) (distributions checks). What usually checks here:\n\n1. volume overfiltration by statistics (if exists need to regenerate statistics and recalibrate engine)\n2. density overcorrection (if outlier houses with too low volumes/too high volumes get much higher/much lower density in comparison with average density). Threshold is 5%. \n3. normality of distributions (abnormal cases: too long right/left tails, skewness, 2+ distribution vertex etc)\n\nnormal practice - take akk calibration data (or subset from calibration data and compare new cycle-houses with calibration data)","lastmodified":"2023-05-11T18:22:48.263080843Z","tags":[]},"/notes/images/engine-output-monitoring/pc-scores-preparation":{"title":"pc scores preparation","content":"regular check results from devices, especially mass results. It allows to notice abnormal cases and do recalibration engine. (does with get_raw_feature script)","lastmodified":"2023-05-11T18:22:48.263080843Z","tags":[]},"/notes/images/engine-release-preparation-and-push/device-engine-preparation":{"title":"device engine preparation","content":"Process to prepare engine release for devices (both: N2, Jetson). This process includes:\n1. pc engine and results of this engine finalization and release (release name assigning, registration in the DB, all files renaming with release name, conservation)\n2. device engine generation: \n- pc engine settings adaptation for work on device (main_params.yml file adaptation - params change)\n- add extra files and scripts for device work to the engine pack \n- add exe for devices, create required for devices folders structure\n- spy engine adding into device engine pack \n- store device releases pack + pc engine results on the local server in special place in client-breed-gender folders\n\n3. push to git","lastmodified":"2023-05-11T18:22:48.263080843Z","tags":[]},"/notes/images/engine-release-preparation-and-push/engine-release-registration-and-push":{"title":"engine release registration and push","content":"Each engine release is registered in database (Postges) with info regarding specific denisty models and human's comment on release. \nDatabase structure of engine releases data storaging: \n![[Pasted image 20230418144355.png]]\nScreenshot of view in postgres with engine release history. \n![[Pasted image 20230418141602.png]]\n\nGit structure for engine releases storaging:\n![[Pasted image 20230418144500.png]]","lastmodified":"2023-05-11T18:22:48.263080843Z","tags":[]},"/notes/images/engine-release-preparation-and-push/pc-engine-preparationclientbreedgender":{"title":"pc engine preparation(client,breed,gender)","content":"Semi-automized process to prepare engine pack for PC (windows) - to collect all required files, all updated files, new exe version, add new settings to main_params.yaml file/to delete outdated settings. \nIn script need to specify files: \n- statistis \n- density model module (several files are included for model work)\n- filtration files \n- standards \n- extra models (pose_classifier, updated chicken detector, masks models)\n- other files which should be added into engine pack\n- flags for different settings in main_params/modes ","lastmodified":"2023-05-11T18:22:48.263080843Z","tags":[]},"/notes/images/engine-release-preparation-and-push/statistics-generation":{"title":"statistics generation","content":"Statistics is file with historical mean value, stdev, filtration thresholds for such chicken features as: volume, max_axis, min_axis, height. This file is set in engine main_params.yaml file here: \n\nFile is unique for each client-breed-gender and should be updated: \n1. When new combination client-breed-gender was registered and some data was collected - in process of first engine for this client-breed-gender calibration.\n2. When big amount of new data for particular client-breed-gender was collected and statisics file is outdated (not appropriate mean or filtration threshold anymore\n\nExample of part of statistics file for feature: volume_norm_corr \n![[Pasted image 20230417185411.png]]","lastmodified":"2023-05-11T18:22:48.26708091Z","tags":[]},"/notes/images/targets-preparation/Targets-generation":{"title":"Targets generation","content":"Process of mass targets generation to use it for erros calculation and models training. \n## **Generate FULL** - use one of this scripts, if you need to generate:\n\n-   **combine_targets_simple.py** = [DOC, Farmers, PIWFHA] = _full_new\n-   **combine_targets_spline.py** = [DOC, PIWFHA]and second_curve_sources = [DOC, Farmers]\n\nfull process of targets generation sescription: https://shy-tuba-747.notion.site/Instructions-weights-and-generation-of-weights-e2b93c8b5c544555bdb06a7f5f013242","lastmodified":"2023-05-11T18:22:48.26708091Z","tags":[]},"/notes/images/targets-preparation/piwfha-generation":{"title":"piwfha generation","content":"**PIWFHA** - potential ideal weight for slaughter day 12:00. Check\n[[Theory.canvas]]\nThis transfered SLT weight is used for mass targets preparation. ","lastmodified":"2023-05-11T18:22:48.271080977Z","tags":[]},"/notes/images/targets-preparation/targets-check-and-cleaning-from-outliers":{"title":"targets check and cleaning from outliers","content":"Analyzing graphs to find unreliable values of manual weights (Farmers).\nWorks by comparison target weights curve with volume by engine curve to find some jump and drops in intial target data.","lastmodified":"2023-05-11T18:22:48.271080977Z","tags":[]},"/notes/images/targets-preparation/web-interface-for-data-insert-with-pack-of-autohecks":{"title":"web-interface for data insert with pack of autohecks","content":"Data that is collected :\nEDOC - day old chickens weight. Weight of hatching (age 0)\n\nFarmers - manual measurement by farmers (usually once a week)\n\nSLT - slaughter weight. Weight obtained from the plants at the slaughter datetime. + SLT timetable\n\nBy trial and error, an automated data entry control system was created.\n\nIn the same web-interface documentation (code documentation and manuals is available).","lastmodified":"2023-05-11T18:22:48.271080977Z","tags":[]},"/notes/lists/APP-projection-model":{"title":"APP projection model","content":"Mass forecasting for the whole cycle based on previous ages. Final model works on cloud (Birdoo App)\n#ElshatAkmaev \n[[App projection.canvas]]\n","lastmodified":"2023-05-11T18:22:48.271080977Z","tags":[]},"/notes/lists/C++-Engine-development":{"title":"C++ Engine development","content":"#PashaKazantsev #PavelSkribtsov\n[[C++ Engine development.canvas]]\n","lastmodified":"2023-05-11T18:22:48.271080977Z","tags":[]},"/notes/lists/Computationsengine-run-though-python":{"title":"Computations(engine run though python)","content":"C++ engine run through python in different modes. Automatic system for palleling computations among PCs, creation correct engine snapshots on each computer, putting the required data (explciits/rolled/images) into engine folder and running engine on it. Status monitoring (including errors and exception), notification in Telebot. Storing data on server after local machine\n#AnnaSosnovskaya \n[[Computations(engine run though python).canvas]]\n","lastmodified":"2023-05-11T18:22:48.271080977Z","tags":[]},"/notes/lists/Datasets-Preparationwork-with-big-data":{"title":"Datasets Preparation(work with big data)","content":"Table aggregated datasets preparation for models training\n#ElshatAkmaev #AnnaSosnovskaya #AlinaRadaeva #AnastasiaPshechinko \n[[Data sets preparation (work with big data).canvas]]\n","lastmodified":"2023-05-11T18:22:48.271080977Z","tags":[]},"/notes/lists/Density-or-Mass-models-training":{"title":"Density or Mass models training","content":"Pipeline for AI models training to predict denisty and mass - for engine release and experiments\n#AnastasiaPshechinko #AnnaSosnovskaya #PavelSkribtsov \n[[Density or Mass models training.canvas]]\n\n","lastmodified":"2023-05-11T18:22:48.271080977Z","tags":[]},"/notes/lists/Device":{"title":"Device","content":"Engine run and data collection on devices+devices managment and control\n\n[[Device.canvas]]\n","lastmodified":"2023-05-11T18:22:48.271080977Z","tags":[]},"/notes/lists/Downloading":{"title":"Downloading","content":"Explicits, rolled, images downloading and storing on local servers\n#AnnaSosnovskaya #ElshatAkmaev \n[[Downloading.canvas]]\n","lastmodified":"2023-05-11T18:22:48.271080977Z","tags":[]},"/notes/lists/Engine-output-monitoring":{"title":"Engine output monitoring","content":"Field work tasks, errors visualization, engine proper work check\n#foreign #AnastasiaPshechinko \n[[Engine output monitroing.canvas]]\n\n","lastmodified":"2023-05-11T18:22:48.271080977Z","tags":[]},"/notes/lists/Engine-release-preparation-and-push":{"title":"Engine release preparation and push","content":"PC/device engine configuration\n#AnnaSosnovskaya #AlinaRadaeva \n[[Engine release preparation.canvas]]\n","lastmodified":"2023-05-11T18:22:48.271080977Z","tags":[]},"/notes/lists/RD-Computer-vision-and-data-science":{"title":"R\u0026D Computer vision and data science","content":"External tools/scripts from all other modules are used here - experiments to improve Birdoo accuracy\n#PavelSkribtsov #AnnaSosnovskaya #AlinaRadaeva \n[[R\u0026D Computer vision and data science.canvas]]\n","lastmodified":"2023-05-11T18:22:48.271080977Z","tags":[]},"/notes/lists/Targets-preparation":{"title":"Targets preparation","content":"Manual weights and SLT info collecting, storaging and preparation for training/analysis purposes\n#AnastasiaPshechinko #AlinaRadaeva \n[[Targets preparation.canvas]]\n","lastmodified":"2023-05-11T18:22:48.271080977Z","tags":[]},"/notes/lists/client-data-management":{"title":"client data management","content":"Cycle-houses info (client, farm, cycle, house, breed, gender, hatch date) registration in the Postgres DB with which all processes is working with...\n#AlinaRadaeva #AnnaSosnovskaya #ElshatAkmaev #AnastasiaPshechinko\n[[client daata management.canvas]]\n","lastmodified":"2023-05-11T18:22:48.271080977Z","tags":[]},"/notes/mainblocks/C++-engine-development/cloud-engine":{"title":"cloud engine","content":"","lastmodified":"2023-05-11T18:22:48.271080977Z","tags":[]},"/notes/mainblocks/C++-engine-development/device-and-pc-engine":{"title":"device and pc engine","content":"Input: depth and rgb images. Output: result files (explicit, rolled, running_stats, history, logs, markup etc). Final result of engine - mass prediction for each chicken.  \nProcesses performed by the developer:\n1. Embedding new features in the engine\n2. Work on reliability, logging, self-medication\n3. Testing\n4. Compilation of exe for Windows PC, linux devices (jetson and N2 separately)","lastmodified":"2023-05-11T18:22:48.271080977Z","tags":[]},"/notes/mainblocks/app-projection/models-storaging-in-DB":{"title":"models storaging in DB","content":"After model(s) validation it will be pushed to Postgre `birdoo` database (host: 54.68.148.17, port: 5432) \u0026 aws s3 (analytics-birdoo bucket): postgre database (in table `projection_models`)  contains related info about client, breed_type and gender and whether it's verified or not as well as the specific model parameters (input data length \u0026 prediction averaging) and, finally, model filename. All of that will be used to get the model via code to make predictions;\n[[Skrins]]","lastmodified":"2023-05-11T18:22:48.275081045Z","tags":[]},"/notes/mainblocks/app-projection/picture/Choosing-the-best-model":{"title":"Choosing the best model","content":"There are metrics like \"relative error on day N\" and \"stability\"; the latter is considered as the average of the absolute differences of the predicates for the current day compared to the predicates for the previous one, each of them is attributed to an interval (usually there are 3 of them) and each interval has its own weight, just like each future day has its weight - usually, incrementally from 0.33 to 1 evenly; + the error on N day has more weight than stability, i.e. each \"metric\" is also assigned its own weight. Next, the weighted average is considered and then it's not the end yet, then next we look at the proportion (%) of the cycle-house-day lines in the error table that have an error below 0.0 N% (for example, 2 or 5); ideally, 0.98-1.0 should be below 0.05 + we look at errors on the day of mutual funds;","lastmodified":"2023-05-11T18:22:48.275081045Z","tags":[]},"/notes/mainblocks/app-projection/picture/Skrins":{"title":"Skrins","content":"\n\nDB skrins\n![[DB.png]]\ns3 skrins\n![[S3.2.png]]![[S3.1.png]]","lastmodified":"2023-05-11T18:22:48.275081045Z","tags":[]},"/notes/mainblocks/app-projection/runnning-on-the-cloud":{"title":"runnning on the cloud","content":"Projection model work is sheduled and running on EC2 AWS. Proejction results are stored in Mongo and then visualized in Tesp App and Prod App\n\n#Santosh","lastmodified":"2023-05-11T18:22:48.275081045Z","tags":[]},"/notes/mainblocks/app-projection/training-pipeline":{"title":"training pipeline","content":"After choosing required model architectures and specific parameters are set for given client, breed type and gender we get bunch of models with the best one selected by weighted sum of sum metrics/errors like overall accuracy, percentage of cycle-houses-day with error less than given threshold (say, 2%), stability of predictions and its visual behaviour; validation may take ome extra time due to additional checks; \n[[Choosing the best model]]\n","lastmodified":"2023-05-11T18:22:48.275081045Z","tags":[]},"/notes/mainblocks/client-data-managmentcycles/DataBase":{"title":"DataBase","content":"To storage client info (client, farm, house, device, cycle, breed, gender, cycle_start_day, standard weights and statistics per each clinet-breed-gender) PostgreSQL is used. SQL database allows to stora data in strict format so all cycle-houses info is standartized and prepared for usage through code. As a backup all this info is also stored in xlsx files on local servers. Later this data is used in any scripts, processes and tasks - all python scripts access DB to get client info, all tasks specification goes through DB (if we want to get PC scores for CGTHBG Cycle 2 - we set this filter in script and script access DB to get all further info to choose proper pack of data).\n\n","lastmodified":"2023-05-11T18:22:48.275081045Z","tags":[]},"/notes/mainblocks/client-data-managmentcycles/Local-backup":{"title":"Local backup","content":"xlsx files with client info stored on local servers. Have pack of scripts for local storage and DB synchronization. Plan to move fully to DB someday. Although now this bakup helps to recover vital data if something happened to PostgreDB (rescue several times) \n","lastmodified":"2023-05-11T18:22:48.275081045Z","tags":[]},"/notes/mainblocks/client-data-managmentcycles/new-cycles-registration":{"title":"new cycles registration","content":"Cycle houses are registered in semi-automatic mode: \n1. auto scanning of AWS/GoogleDrive, \n2. getting data for found new cycle-houses from Mongo (breed, gender, cycle_start_day)\n3. manual check of data (need to assign short name of farm - if that's new farm, need to assign Cycle common name for houses from one client which started in the same time and we consider it as one cycle)\n4. Update database with manually checked final client data","lastmodified":"2023-05-11T18:22:48.275081045Z","tags":[]},"/notes/mainblocks/computations/explicits-and-rolled-rescoringfull-mode-fast-mode":{"title":"explicits and rolled rescoring(full mode, fast mode)","content":"## full mode\nEngine takes predefines EXPLICITS files and perform all next necessary computation (faster, used when computer vision was not changed)\n[[full mode.canvas]]\n## fast  mode\nEngine takes predefines ROLLED files and perform all next necessary computation (faster when restore mode, used when only density model and density correction coefs were changed)\n[[fast mode.canvas]]","lastmodified":"2023-05-11T18:22:48.295081381Z","tags":[]},"/notes/mainblocks/computations/images-computing":{"title":"images computing","content":"Engine takes images as inputs, collect all computer vision information and run different models, filtration, etc. After that perform tracking and generate rolled files. If engine settings require model’s application and statistical filtration of rolled files, perform it\n[[images computing_more.canvas]]","lastmodified":"2023-05-11T18:22:48.299081449Z","tags":[]},"/notes/mainblocks/computations/parallel-work-of-several-computersTelebot":{"title":"parallel work of several computers,Telebot","content":"#AnnaSosnovskaya   came up with a tele bot that allows you to form tasks for calculations and distribute them between computing capacities\n[[Telebot more.canvas]]\n\n","lastmodified":"2023-05-11T18:22:48.299081449Z","tags":[]},"/notes/mainblocks/datasets-preparation/data-check":{"title":"data check","content":"what is checked here: \n* inversion\n* bad reliability\n* bad targets\n* devices similarity\n* age completness\n\n## analysis of graphs after collecting the dataset\n[[ways of analysis.canvas]]\n\nData check process only finds the problem cases and creates a report for  a human. Found cases are not filtered automatically for now. \n","lastmodified":"2023-05-11T18:22:48.299081449Z","tags":[]},"/notes/mainblocks/datasets-preparation/data-collection-from-pack-of-engine-results":{"title":"data collection (from pack of engine results)","content":"Collect the data from PC engine results\n\nThere's a strict system of datasets storaging in order to not mess datasets and always be able to find the exact dataset on which exact models were trained and errors were calculated. It's neccessary to be able always repeat previously got results. A unique name is also assigned to each new dataset and there're checks in order not to rewrite it. \n\nStorage on Moscow server: \\\\\\Datasets\\\\chikens\\\\MHDR_Chicken\\\\sources\\\\datasets\\\\zbage_datasets\n![[Pasted image 20230426173036.png]]\n\nInside each dataset folder also storaged: \n- snapshot of collect_dataset.py configs which were used during this particular dataset collection (collecting_params.yaml, test_filters.yaml, union_dataset.yaml)\n- dataset check results \n- filtration results \n- log \n- csv datset file (collected_df.csv)\n\n![[Pasted image 20230426173250.png]]\n\n\n","lastmodified":"2023-05-11T18:22:48.299081449Z","tags":[]},"/notes/mainblocks/datasets-preparation/extend-with-ROLLED":{"title":"extend with ROLLED","content":"This process allows to transfer dataset where 1 day = 1 mean mass to dataset where ~500 individual chickens per 1 day. As a result training will be conducted on individual hens instead of 1 mean mass per 1 day\n\n","lastmodified":"2023-05-11T18:22:48.303081516Z","tags":[]},"/notes/mainblocks/datasets-preparation/extrapalation":{"title":"extrapalation","content":"There're 2 different modes of extrapolation/interpolation:\n- extrapolation of features - averages per day\n- extrapolation of features - distribution per day (when we study at individual kappa, +-500 chickens/day)\n\nEach feature has its own way of extrapolation/interpolation. Possible ways of extrapolation are: \n- use standard of this feature by day to enter standard curve into real means and fill missed values\n- fill missed values by values from the nearest available days","lastmodified":"2023-05-11T18:22:48.303081516Z","tags":[]},"/notes/mainblocks/datasets-preparation/filtration":{"title":"filtration","content":"According to the specified thresholds for each filter parameter, days/devices or full houses are removed from training datasets. \n\nMain reasons of filtration: \n* bad reliability \n* low amount of datapoints \n* low amount of available days per cycles \n* target weights unavailability \n* manually removed houses by human (due to pack of reasons from found during Data Check)","lastmodified":"2023-05-11T18:22:48.303081516Z","tags":[]},"/notes/mainblocks/datasets-preparation/regularization":{"title":"regularization","content":"Addition of artificial examples and restriction on possible values. Strong regularization is required in case of small and questionable data. Light regularization is required when data is pretty representative (close to full coverege of all possible cases inside client) so need to wide data by artificial examples just a little bit.","lastmodified":"2023-05-11T18:22:48.303081516Z","tags":[]},"/notes/mainblocks/datasets-preparation/test-train-validation-separation":{"title":"test , train ,validation separation","content":"Test and train splitting can be random or manually set. \nTo set it manual - it's neccessary to specify what exact cycle-houses for each client/breed/gender should be used as test and remain - for train and validation. Validation is always allocated automatically. \n\nExample of test_filters.yaml config where all houses which should used as test are specified.\n\n![[Pasted image 20230426174127.png]]\n\nTrain, test and full (train+test) datasets are stored separately and have common name: \n![[Pasted image 20230426175004.png]]","lastmodified":"2023-05-11T18:22:48.303081516Z","tags":[]},"/notes/mainblocks/density-or-mass-models-training/Scrolingchosen/Input":{"title":"Input","content":"# FIXME\n-   Experiment config\n-   c-vector model\n-   density model\n-   Datasets to score model\n","lastmodified":"2023-05-11T18:22:48.307081583Z","tags":[]},"/notes/mainblocks/density-or-mass-models-training/Scrolingchosen/Metrics":{"title":"Metrics","content":"# FIXME\n\n-   mean relative abs err\n-   mean relative err\n-   point count rate less then 3.5%\n-   point count rate less then 5%\n-   density_slope\n-   density_slope_fit\n-   density_variation\n-   err std\n\nEach metrics is scored on whole dataset, and 3 parts separately (~ 0-15 ages, 16-30 ages, 30+ ages)","lastmodified":"2023-05-11T18:22:48.307081583Z","tags":[]},"/notes/mainblocks/density-or-mass-models-training/Scrolingchosen/Output":{"title":"Output","content":"# FIXME\n\n-   dataset with calculated new density values and errors\n-   figs\n-   metrics (stores in postgres: density_model_metrics table)\n\n\n## Output visual content\n\n","lastmodified":"2023-05-11T18:22:48.307081583Z","tags":[]},"/notes/mainblocks/density-or-mass-models-training/Scrolingchosen/Pipeline":{"title":"Pipeline","content":"# FIXME\n\n-   Initialize config from config file\n-   Load all metrics from PostgresDB for specified params:\n    -   datasets of interest (usually full)\n    -   metrics of interest (names from available SummaryGeneratorConfig.all_metrics)\n    -   filters (only client|farm|breed_type|gender filters are available)\n    -   filters (only client|farm|breed_type|gender filters are available)\n    -   experiments keywords (check experiments and experiment_match_type in SummaryGeneratorConfig\n-   For each filter will be created folder in global_reports_save_dir.\n-   In each filter group folder will be created report file for each report_group_by_mode group , that will include all metrics for all clients|breed_type|gender\n-   In each report will be created sheets with winners for specified by filters clients group and specified report_group_by_mode\n-   Results on each filters group will also be printed in console like this\n\n```jsx\nCALC SCORES FOR CLIENT_1\nGENERATING REPORT FOR dataset_20220930_union_train\nWINNERS ORDER:\n1 place: exp_cvec_s_wareog_reg_2 (10 wins)\n2 place: exp_cvec_s_wareog_reg_5 (10 wins)\n3 place: indi (9 wins)\n4 place: exp_cvec_s_wareog_reg_4 (9 wins)\nIt meant that exp_cvec_s_wareog_reg_2 has the best metrics scores\n```\n\n \u003cfont color=\"red\"\u003e Note: If only indi in winners order, then no results were found in dn for specified parameters\u003c/font\u003e\n ","lastmodified":"2023-05-11T18:22:48.307081583Z","tags":[]},"/notes/mainblocks/density-or-mass-models-training/experiments":{"title":"experiments","content":"","lastmodified":"2023-05-11T18:22:48.307081583Z","tags":[]},"/notes/mainblocks/density-or-mass-models-training/interface-for-models-experiments-generation":{"title":"interface for models experiments generation","content":"Launching the interface as a separate application where you can specify the parameters of the density model training:dataset selection,parameters of pre-processing,filtering,extrapalation,augmentation,criteria for selecting the desired model\nhttps://shy-tuba-747.notion.site/Working-with-interface-f1df33e3a9814dc18339dbfa26a86679\n","lastmodified":"2023-05-11T18:22:48.307081583Z","tags":[]},"/notes/mainblocks/density-or-mass-models-training/model-training-pipeline":{"title":"model training pipeline","content":"# FIXME\n\n- Initialization\n- Filtering data\n- Extrapolating and smoothing data\n- Grouping by house\n- Matching target weights to extrapolated rows\n- Generating C-vector if needed\n- Adding augmentation points\n- Training ZBAGE\n[Output](output.canvas)\n","lastmodified":"2023-05-11T18:22:48.307081583Z","tags":[]},"/notes/mainblocks/density-or-mass-models-training/models-version-tracking-and-storaging":{"title":"models version tracking and storaging","content":"All good density modules are stored in Postgres (density_models table) and locally: \\\\Datasets\\chikens\\MHDR_Chicken\\sources\\DensityModels\\union\n","lastmodified":"2023-05-11T18:22:48.307081583Z","tags":[]},"/notes/mainblocks/density-or-mass-models-training/scoring-on-new-data":{"title":"scoring on new data","content":"","lastmodified":"2023-05-11T18:22:48.307081583Z","tags":[]},"/notes/mainblocks/density-or-mass-models-training/scoringchosen-of-the-best-model-based-on-metrics-and-expertise-results-comparison":{"title":"scoring,chosen of the best model based on metrics and expertise, results comparison","content":"## Scoring\nGet any dataset and implements experiment settings to calculate new density values, errors and score metrics.\n\n## [Pipeline of scoring](Scoring.canvas)\n## [Choosing the best model](Pipeline)\n\n\n","lastmodified":"2023-05-11T18:22:48.307081583Z","tags":[]},"/notes/obsidian":{"title":"Obsidian Vault Integration","content":"\n## Setup\nObsidian is the preferred way to use Quartz. You can either create a new Obsidian Vault or link one that your already have.\n\n### New Vault\nIf you don't have an existing Vault, [download Obsidian](https://obsidian.md/) and create a new Vault in the `/content` folder that you created and cloned during the [setup](notes/setup.md) step.\n\n### Linking an existing Vault\nThe easiest way to use an existing Vault is to copy all of your files (directory and hierarchies intact) into the `/content` folder.\n\n## Settings\nGreat, now that you have your Obsidian linked to your Quartz, let's fix some settings so that they play well.\n\nOpen Settings \u003e Files \u0026 Links and look for these two items:\n\n1. Set the **New link format** to **Absolute Path in vault**. If you have a completely flat vault (no folders), this step isn't necessary.\n2. Turn **on** the **Automatically update internal links** setting.\n\n\n![[notes/images/obsidian-settings.png]]*Obsidian Settings*\n\n## Templates\nInserting front matter everytime you want to create a new Note gets annoying really quickly. Luckily, Obsidian supports templates which makes inserting new content really easily.\n\n\u003e [!WARNING]\n\u003e \n\u003e **If you decide to overwrite the `/content` folder completely, don't remove the `/content/templates` folder!**\n\nHead over to Options \u003e Core Plugins and enable the Templates plugin. Then go to Options \u003e Hotkeys and set a hotkey for 'Insert Template' (I recommend `[cmd]+T`). That way, when you create a new note, you can just press the hotkey for a new template and be ready to go!\n\n\u003e 👀 Step 4: [Preview Quartz Changes](notes/preview%20changes.md)\n","lastmodified":"2023-05-11T18:22:48.307081583Z","tags":["setup"]}}