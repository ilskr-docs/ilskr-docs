<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title/><link>https://ilskr-docs.github.io/ilskr-docs/</link><description>Recent content on</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://ilskr-docs.github.io/ilskr-docs/index.xml" rel="self" type="application/rss+xml"/><item><title>Obsidian Vault Integration</title><link>https://ilskr-docs.github.io/ilskr-docs/notes/obsidian/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ilskr-docs.github.io/ilskr-docs/notes/obsidian/</guid><description>Setup Obsidian is the preferred way to use Quartz. You can either create a new Obsidian Vault or link one that your already have.</description></item><item><title/><link>https://ilskr-docs.github.io/ilskr-docs/notes/images/data-checkbad-or-old-explicits/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ilskr-docs.github.io/ilskr-docs/notes/images/data-checkbad-or-old-explicits/</guid><description> checking that the file really belongs to this cycle (checking for dates in the file) check for a broken file checking for empty lines in the file</description></item><item><title/><link>https://ilskr-docs.github.io/ilskr-docs/notes/images/data-compression/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ilskr-docs.github.io/ilskr-docs/notes/images/data-compression/</guid><description>Everything is compressed into parquet format, as it allows you to compress the original txt up to 10 times. + increases the speed of reading data from parquet (compared to txt).</description></item><item><title/><link>https://ilskr-docs.github.io/ilskr-docs/notes/images/data-stroaging-on-servers/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ilskr-docs.github.io/ilskr-docs/notes/images/data-stroaging-on-servers/</guid><description>The way to the exclpicits \\Data chicken\\chicken\\RESULTS\\RESULTS_from_devices\\Anai\\Cycle 3\\House1140\\CGBRCV0004\\ForwardRunViz_explicit
Datachicken - Server chickens - The shared folder of the chicken project RESULTS - Shared results folder RESULTS_from_devices - Folder of results from devices (there are also RESULTS_from_devices_spy - results from the spy engine on devices) Anai - farm Cycle 3 - Cycle House 1140 - House CGBRCV0004 - Device ForwardRunViz_explicit - Shared folder with explicits (not here, but you can go further along the way) explicits folders broken down by age !</description></item><item><title/><link>https://ilskr-docs.github.io/ilskr-docs/notes/images/downloading-from-AWS/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ilskr-docs.github.io/ilskr-docs/notes/images/downloading-from-AWS/</guid><description>What is storaged on S3 (per each session):
explicit files rolled files rgb and depth image example (1 per session) commands.</description></item><item><title/><link>https://ilskr-docs.github.io/ilskr-docs/notes/images/Downloading-from-GoogleDrive/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ilskr-docs.github.io/ilskr-docs/notes/images/Downloading-from-GoogleDrive/</guid><description>Images storaging only for now (only for that clients which allow to download images from there houses. And not all images but 1 arhive per 5 min of shooting).</description></item><item><title/><link>https://ilskr-docs.github.io/ilskr-docs/notes/images/engine-output-monitoring/cycle-normality-check/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ilskr-docs.github.io/ilskr-docs/notes/images/engine-output-monitoring/cycle-normality-check/</guid><description>(comparison with calibration data) Comparing new data with calibration data using mahalanobis_report_simple.py (takes mahalanobis_report_config_simple.yaml fith choosen filters as input, and choosen fetures combinations) Allows to notice an anomalies with new data such volume/mass inversion and geometry deviations.</description></item><item><title/><link>https://ilskr-docs.github.io/ilskr-docs/notes/images/engine-output-monitoring/datapoints-preparation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ilskr-docs.github.io/ilskr-docs/notes/images/engine-output-monitoring/datapoints-preparation/</guid><description>It is used for creating datapoints based on PC scores with required mass mean per day. Generated datapoints will be uploaded to MongoDB manually and then sent to HQ and WebApp to demonstrate to client.</description></item><item><title/><link>https://ilskr-docs.github.io/ilskr-docs/notes/images/engine-output-monitoring/distributions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ilskr-docs.github.io/ilskr-docs/notes/images/engine-output-monitoring/distributions/</guid><description>checks allows to see average day distribution for features (especially for volume, also for day_average_density and mass_core) (distributions checks). What usually checks here:</description></item><item><title/><link>https://ilskr-docs.github.io/ilskr-docs/notes/images/engine-output-monitoring/pc-scores-preparation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ilskr-docs.github.io/ilskr-docs/notes/images/engine-output-monitoring/pc-scores-preparation/</guid><description>regular check results from devices, especially mass results. It allows to notice abnormal cases and do recalibration engine. (does with get_raw_feature script)</description></item><item><title/><link>https://ilskr-docs.github.io/ilskr-docs/notes/images/engine-release-preparation-and-push/device-engine-preparation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ilskr-docs.github.io/ilskr-docs/notes/images/engine-release-preparation-and-push/device-engine-preparation/</guid><description>Process to prepare engine release for devices (both: N2, Jetson). This process includes:
pc engine and results of this engine finalization and release (release name assigning, registration in the DB, all files renaming with release name, conservation) device engine generation: pc engine settings adaptation for work on device (main_params.</description></item><item><title/><link>https://ilskr-docs.github.io/ilskr-docs/notes/images/engine-release-preparation-and-push/engine-release-registration-and-push/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ilskr-docs.github.io/ilskr-docs/notes/images/engine-release-preparation-and-push/engine-release-registration-and-push/</guid><description>Each engine release is registered in database (Postges) with info regarding specific denisty models and human&amp;rsquo;s comment on release. Database structure of engine releases data storaging: !</description></item><item><title/><link>https://ilskr-docs.github.io/ilskr-docs/notes/images/engine-release-preparation-and-push/pc-engine-preparationclientbreedgender/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ilskr-docs.github.io/ilskr-docs/notes/images/engine-release-preparation-and-push/pc-engine-preparationclientbreedgender/</guid><description>Semi-automized process to prepare engine pack for PC (windows) - to collect all required files, all updated files, new exe version, add new settings to main_params.</description></item><item><title/><link>https://ilskr-docs.github.io/ilskr-docs/notes/images/engine-release-preparation-and-push/statistics-generation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ilskr-docs.github.io/ilskr-docs/notes/images/engine-release-preparation-and-push/statistics-generation/</guid><description>Statistics is file with historical mean value, stdev, filtration thresholds for such chicken features as: volume, max_axis, min_axis, height. This file is set in engine main_params.</description></item><item><title/><link>https://ilskr-docs.github.io/ilskr-docs/notes/images/RD-computer-vision-or-data-science/computer-vision/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ilskr-docs.github.io/ilskr-docs/notes/images/RD-computer-vision-or-data-science/computer-vision/</guid><description>where raw images are required
Examples of CV R&amp;amp;D:
new chicken detector new model/algorithm to build chicken masks new features for which esimation images are required algorithms for better floor determination algorithms for image quality estimation</description></item><item><title/><link>https://ilskr-docs.github.io/ilskr-docs/notes/images/RD-computer-vision-or-data-science/data-science/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ilskr-docs.github.io/ilskr-docs/notes/images/RD-computer-vision-or-data-science/data-science/</guid><description>where table data is enough (no need in raw images)
Examples of DS R&amp;amp;D:
new density/mass models epxeriments (new models architectures/new settings, extra features as input, extra data merging, new fomrats of data check) extra features implementing into engine (where data storages in explicit files is enough - no need in raw images) impact testing of new features</description></item><item><title/><link>https://ilskr-docs.github.io/ilskr-docs/notes/images/targets-preparation/piwfha-generation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ilskr-docs.github.io/ilskr-docs/notes/images/targets-preparation/piwfha-generation/</guid><description>PIWFHAÂ - potential ideal weight for slaughter day 12:00. Check [[Theory.canvas]] This transfered SLT weight is used for mass targets preparation.</description></item><item><title/><link>https://ilskr-docs.github.io/ilskr-docs/notes/images/targets-preparation/targets-check-and-cleaning-from-outliers/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ilskr-docs.github.io/ilskr-docs/notes/images/targets-preparation/targets-check-and-cleaning-from-outliers/</guid><description>Analyzing graphs to find unreliable values of manual weights (Farmers). Works by comparison target weights curve with volume by engine curve to find some jump and drops in intial target data.</description></item><item><title/><link>https://ilskr-docs.github.io/ilskr-docs/notes/images/targets-preparation/Targets-generation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ilskr-docs.github.io/ilskr-docs/notes/images/targets-preparation/Targets-generation/</guid><description>Process of mass targets generation to use it for erros calculation and models training.
Generate FULLÂ - use one of this scripts, if you need to generate: combine_targets_simple.</description></item><item><title/><link>https://ilskr-docs.github.io/ilskr-docs/notes/images/targets-preparation/web-interface-for-data-insert-with-pack-of-autohecks/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ilskr-docs.github.io/ilskr-docs/notes/images/targets-preparation/web-interface-for-data-insert-with-pack-of-autohecks/</guid><description>Data that is collected : EDOC - day old chickens weight. Weight of hatching (age 0)
Farmers - manual measurement by farmers (usually once a week)</description></item><item><title/><link>https://ilskr-docs.github.io/ilskr-docs/notes/lists/APP-projection-model/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ilskr-docs.github.io/ilskr-docs/notes/lists/APP-projection-model/</guid><description>Mass forecasting for the whole cycle based on previous ages. Final model works on cloud (Birdoo App) #ElshatAkmaev [[App projection.canvas]]</description></item><item><title/><link>https://ilskr-docs.github.io/ilskr-docs/notes/lists/C++-Engine-development/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ilskr-docs.github.io/ilskr-docs/notes/lists/C++-Engine-development/</guid><description>#PashaKazantsev #PavelSkribtsov [[C++ Engine development.canvas]]</description></item><item><title/><link>https://ilskr-docs.github.io/ilskr-docs/notes/lists/client-data-management/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ilskr-docs.github.io/ilskr-docs/notes/lists/client-data-management/</guid><description>Cycle-houses info (client, farm, cycle, house, breed, gender, hatch date) registration in the Postgres DB with which all processes is working with&amp;hellip; #AlinaRadaeva #AnnaSosnovskaya #ElshatAkmaev #AnastasiaPshechinko [[client daata management.</description></item><item><title/><link>https://ilskr-docs.github.io/ilskr-docs/notes/lists/Computationsengine-run-though-python/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ilskr-docs.github.io/ilskr-docs/notes/lists/Computationsengine-run-though-python/</guid><description>C++ engine run through python in different modes. Automatic system for palleling computations among PCs, creation correct engine snapshots on each computer, putting the required data (explciits/rolled/images) into engine folder and running engine on it.</description></item><item><title/><link>https://ilskr-docs.github.io/ilskr-docs/notes/lists/Datasets-Preparationwork-with-big-data/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ilskr-docs.github.io/ilskr-docs/notes/lists/Datasets-Preparationwork-with-big-data/</guid><description>Table aggregated datasets preparation for models training #ElshatAkmaev #AnnaSosnovskaya #AlinaRadaeva #AnastasiaPshechinko [[Data sets preparation (work with big data).canvas]]</description></item><item><title/><link>https://ilskr-docs.github.io/ilskr-docs/notes/lists/Density-or-Mass-models-training/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ilskr-docs.github.io/ilskr-docs/notes/lists/Density-or-Mass-models-training/</guid><description>Pipeline for AI models training to predict denisty and mass - for engine release and experiments #AnastasiaPshechinko #AnnaSosnovskaya #PavelSkribtsov [[Density or Mass models training.</description></item><item><title/><link>https://ilskr-docs.github.io/ilskr-docs/notes/lists/Device/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ilskr-docs.github.io/ilskr-docs/notes/lists/Device/</guid><description>Engine run and data collection on devices+devices managment and control
[[Device.canvas]]</description></item><item><title/><link>https://ilskr-docs.github.io/ilskr-docs/notes/lists/Downloading/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ilskr-docs.github.io/ilskr-docs/notes/lists/Downloading/</guid><description>Explicits, rolled, images downloading and storing on local servers #AnnaSosnovskaya #ElshatAkmaev [[Downloading.canvas]]</description></item><item><title/><link>https://ilskr-docs.github.io/ilskr-docs/notes/lists/Engine-output-monitoring/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ilskr-docs.github.io/ilskr-docs/notes/lists/Engine-output-monitoring/</guid><description>Field work tasks, errors visualization, engine proper work check #foreign #AnastasiaPshechinko [[Engine output monitroing.canvas]]</description></item><item><title/><link>https://ilskr-docs.github.io/ilskr-docs/notes/lists/Engine-release-preparation-and-push/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ilskr-docs.github.io/ilskr-docs/notes/lists/Engine-release-preparation-and-push/</guid><description>PC/device engine configuration #AnnaSosnovskaya #AlinaRadaeva [[Engine release preparation.canvas]]</description></item><item><title/><link>https://ilskr-docs.github.io/ilskr-docs/notes/lists/RD-Computer-vision-and-data-science/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ilskr-docs.github.io/ilskr-docs/notes/lists/RD-Computer-vision-and-data-science/</guid><description>External tools/scripts from all other modules are used here - experiments to improve Birdoo accuracy #PavelSkribtsov #AnnaSosnovskaya #AlinaRadaeva [[R&amp;amp;D Computer vision and data science.</description></item><item><title/><link>https://ilskr-docs.github.io/ilskr-docs/notes/lists/Targets-preparation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ilskr-docs.github.io/ilskr-docs/notes/lists/Targets-preparation/</guid><description>Manual weights and SLT info collecting, storaging and preparation for training/analysis purposes #AnastasiaPshechinko #AlinaRadaeva [[Targets preparation.canvas]]</description></item><item><title/><link>https://ilskr-docs.github.io/ilskr-docs/notes/mainblocks/app-projection/models-storaging-in-DB/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ilskr-docs.github.io/ilskr-docs/notes/mainblocks/app-projection/models-storaging-in-DB/</guid><description>After model(s) validation it will be pushed to Postgre birdoo database (host: 54.68.148.17, port: 5432) &amp;amp; aws s3 (analytics-birdoo bucket): postgre database (in table projection_models) contains related info about client, breed_type and gender and whether it&amp;rsquo;s verified or not as well as the specific model parameters (input data length &amp;amp; prediction averaging) and, finally, model filename.</description></item><item><title/><link>https://ilskr-docs.github.io/ilskr-docs/notes/mainblocks/app-projection/picture/Choosing-the-best-model/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ilskr-docs.github.io/ilskr-docs/notes/mainblocks/app-projection/picture/Choosing-the-best-model/</guid><description>There are metrics like &amp;ldquo;relative error on day N&amp;rdquo; and &amp;ldquo;stability&amp;rdquo;; the latter is considered as the average of the absolute differences of the predicates for the current day compared to the predicates for the previous one, each of them is attributed to an interval (usually there are 3 of them) and each interval has its own weight, just like each future day has its weight - usually, incrementally from 0.</description></item><item><title/><link>https://ilskr-docs.github.io/ilskr-docs/notes/mainblocks/app-projection/picture/Skrins/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ilskr-docs.github.io/ilskr-docs/notes/mainblocks/app-projection/picture/Skrins/</guid><description>DB skrins ![[DB.png]] s3 skrins ![[S3.2.png]]![[S3.1.png]]</description></item><item><title/><link>https://ilskr-docs.github.io/ilskr-docs/notes/mainblocks/app-projection/runnning-on-the-cloud/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ilskr-docs.github.io/ilskr-docs/notes/mainblocks/app-projection/runnning-on-the-cloud/</guid><description>Projection model work is sheduled and running on EC2 AWS. Proejction results are stored in Mongo and then visualized in Tesp App and Prod App</description></item><item><title/><link>https://ilskr-docs.github.io/ilskr-docs/notes/mainblocks/app-projection/training-pipeline/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ilskr-docs.github.io/ilskr-docs/notes/mainblocks/app-projection/training-pipeline/</guid><description>After choosing required model architectures and specific parameters are set for given client, breed type and gender we get bunch of models with the best one selected by weighted sum of sum metrics/errors like overall accuracy, percentage of cycle-houses-day with error less than given threshold (say, 2%), stability of predictions and its visual behaviour; validation may take ome extra time due to additional checks; [[Choosing the best model]]</description></item><item><title/><link>https://ilskr-docs.github.io/ilskr-docs/notes/mainblocks/C++-engine-development/cloud-engine/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ilskr-docs.github.io/ilskr-docs/notes/mainblocks/C++-engine-development/cloud-engine/</guid><description/></item><item><title/><link>https://ilskr-docs.github.io/ilskr-docs/notes/mainblocks/C++-engine-development/device-and-pc-engine/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ilskr-docs.github.io/ilskr-docs/notes/mainblocks/C++-engine-development/device-and-pc-engine/</guid><description>Input: depth and rgb images. Output: result files (explicit, rolled, running_stats, history, logs, markup etc). Final result of engine - mass prediction for each chicken.</description></item><item><title/><link>https://ilskr-docs.github.io/ilskr-docs/notes/mainblocks/client-data-managmentcycles/DataBase/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ilskr-docs.github.io/ilskr-docs/notes/mainblocks/client-data-managmentcycles/DataBase/</guid><description>To storage client info (client, farm, house, device, cycle, breed, gender, cycle_start_day, standard weights and statistics per each clinet-breed-gender) PostgreSQL is used.</description></item><item><title/><link>https://ilskr-docs.github.io/ilskr-docs/notes/mainblocks/client-data-managmentcycles/Local-backup/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ilskr-docs.github.io/ilskr-docs/notes/mainblocks/client-data-managmentcycles/Local-backup/</guid><description>xlsx files with client info stored on local servers. Have pack of scripts for local storage and DB synchronization. Plan to move fully to DB someday.</description></item><item><title/><link>https://ilskr-docs.github.io/ilskr-docs/notes/mainblocks/client-data-managmentcycles/new-cycles-registration/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ilskr-docs.github.io/ilskr-docs/notes/mainblocks/client-data-managmentcycles/new-cycles-registration/</guid><description>Cycle houses are registered in semi-automatic mode:
auto scanning of AWS/GoogleDrive, getting data for found new cycle-houses from Mongo (breed, gender, cycle_start_day) manual check of data (need to assign short name of farm - if that&amp;rsquo;s new farm, need to assign Cycle common name for houses from one client which started in the same time and we consider it as one cycle) Update database with manually checked final client data</description></item><item><title/><link>https://ilskr-docs.github.io/ilskr-docs/notes/mainblocks/computations/explicits-and-rolled-rescoringfull-mode-fast-mode/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ilskr-docs.github.io/ilskr-docs/notes/mainblocks/computations/explicits-and-rolled-rescoringfull-mode-fast-mode/</guid><description>full mode Engine takes predefines EXPLICITS files and perform all next necessary computation (faster, used when computer vision was not changed) [[full mode.</description></item><item><title/><link>https://ilskr-docs.github.io/ilskr-docs/notes/mainblocks/computations/images-computing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ilskr-docs.github.io/ilskr-docs/notes/mainblocks/computations/images-computing/</guid><description>Engine takes images as inputs, collect all computer vision information and run different models, filtration, etc. After that perform tracking and generate rolled files.</description></item><item><title/><link>https://ilskr-docs.github.io/ilskr-docs/notes/mainblocks/computations/parallel-work-of-several-computersTelebot/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ilskr-docs.github.io/ilskr-docs/notes/mainblocks/computations/parallel-work-of-several-computersTelebot/</guid><description>#AnnaSosnovskaya came up with a tele bot that allows you to form tasks for calculations and distribute them between computing capacities [[Telebot more.</description></item><item><title/><link>https://ilskr-docs.github.io/ilskr-docs/notes/mainblocks/datasets-preparation/data-check/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ilskr-docs.github.io/ilskr-docs/notes/mainblocks/datasets-preparation/data-check/</guid><description>what is checked here:
inversion bad reliability bad targets devices similarity age completness analysis of graphs after collecting the dataset [[ways of analysis.</description></item><item><title/><link>https://ilskr-docs.github.io/ilskr-docs/notes/mainblocks/datasets-preparation/data-collection-from-pack-of-engine-results/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ilskr-docs.github.io/ilskr-docs/notes/mainblocks/datasets-preparation/data-collection-from-pack-of-engine-results/</guid><description>Collect the data from PC engine results
There&amp;rsquo;s a strict system of datasets storaging in order to not mess datasets and always be able to find the exact dataset on which exact models were trained and errors were calculated.</description></item><item><title/><link>https://ilskr-docs.github.io/ilskr-docs/notes/mainblocks/datasets-preparation/extend-with-ROLLED/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ilskr-docs.github.io/ilskr-docs/notes/mainblocks/datasets-preparation/extend-with-ROLLED/</guid><description>This process allows to transfer dataset where 1 day = 1 mean mass to dataset where ~500 individual chickens per 1 day.</description></item><item><title/><link>https://ilskr-docs.github.io/ilskr-docs/notes/mainblocks/datasets-preparation/extrapalation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ilskr-docs.github.io/ilskr-docs/notes/mainblocks/datasets-preparation/extrapalation/</guid><description>There&amp;rsquo;re 2 different modes of extrapolation/interpolation:
extrapolation of features - averages per day extrapolation of features - distribution per day (when we study at individual kappa, +-500 chickens/day) Each feature has its own way of extrapolation/interpolation.</description></item><item><title/><link>https://ilskr-docs.github.io/ilskr-docs/notes/mainblocks/datasets-preparation/filtration/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ilskr-docs.github.io/ilskr-docs/notes/mainblocks/datasets-preparation/filtration/</guid><description>According to the specified thresholds for each filter parameter, days/devices or full houses are removed from training datasets.
Main reasons of filtration:</description></item><item><title/><link>https://ilskr-docs.github.io/ilskr-docs/notes/mainblocks/datasets-preparation/regularization/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ilskr-docs.github.io/ilskr-docs/notes/mainblocks/datasets-preparation/regularization/</guid><description>Addition of artificial examples and restriction on possible values. Strong regularization is required in case of small and questionable data. Light regularization is required when data is pretty representative (close to full coverege of all possible cases inside client) so need to wide data by artificial examples just a little bit.</description></item><item><title/><link>https://ilskr-docs.github.io/ilskr-docs/notes/mainblocks/datasets-preparation/test-train-validation-separation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ilskr-docs.github.io/ilskr-docs/notes/mainblocks/datasets-preparation/test-train-validation-separation/</guid><description>Test and train splitting can be random or manually set. To set it manual - it&amp;rsquo;s neccessary to specify what exact cycle-houses for each client/breed/gender should be used as test and remain - for train and validation.</description></item><item><title/><link>https://ilskr-docs.github.io/ilskr-docs/notes/mainblocks/density-or-mass-models-training/experiments/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ilskr-docs.github.io/ilskr-docs/notes/mainblocks/density-or-mass-models-training/experiments/</guid><description/></item><item><title/><link>https://ilskr-docs.github.io/ilskr-docs/notes/mainblocks/density-or-mass-models-training/interface-for-models-experiments-generation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ilskr-docs.github.io/ilskr-docs/notes/mainblocks/density-or-mass-models-training/interface-for-models-experiments-generation/</guid><description>Launching the interface as a separate application where you can specify the parameters of the density model training:dataset selection,parameters of pre-processing,filtering,extrapalation,augmentation,criteria for selecting the desired model https://shy-tuba-747.</description></item><item><title/><link>https://ilskr-docs.github.io/ilskr-docs/notes/mainblocks/density-or-mass-models-training/model-training-pipeline/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ilskr-docs.github.io/ilskr-docs/notes/mainblocks/density-or-mass-models-training/model-training-pipeline/</guid><description>FIXME Initialization Filtering data Extrapolating and smoothing data Grouping by house Matching target weights to extrapolated rows Generating C-vector if needed Adding augmentation points Training ZBAGE Output</description></item><item><title/><link>https://ilskr-docs.github.io/ilskr-docs/notes/mainblocks/density-or-mass-models-training/models-version-tracking-and-storaging/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ilskr-docs.github.io/ilskr-docs/notes/mainblocks/density-or-mass-models-training/models-version-tracking-and-storaging/</guid><description>All good density modules are stored in Postgres (density_models table) and locally: \Datasets\chikens\MHDR_Chicken\sources\DensityModels\union</description></item><item><title/><link>https://ilskr-docs.github.io/ilskr-docs/notes/mainblocks/density-or-mass-models-training/scoring-on-new-data/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ilskr-docs.github.io/ilskr-docs/notes/mainblocks/density-or-mass-models-training/scoring-on-new-data/</guid><description/></item><item><title/><link>https://ilskr-docs.github.io/ilskr-docs/notes/mainblocks/density-or-mass-models-training/scoringchosen-of-the-best-model-based-on-metrics-and-expertise-results-comparison/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ilskr-docs.github.io/ilskr-docs/notes/mainblocks/density-or-mass-models-training/scoringchosen-of-the-best-model-based-on-metrics-and-expertise-results-comparison/</guid><description>Scoring Get any dataset and implements experiment settings to calculate new density values, errors and score metrics.
Pipeline of scoring Choosing the best model</description></item><item><title/><link>https://ilskr-docs.github.io/ilskr-docs/notes/mainblocks/density-or-mass-models-training/Scrolingchosen/Input/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ilskr-docs.github.io/ilskr-docs/notes/mainblocks/density-or-mass-models-training/Scrolingchosen/Input/</guid><description>FIXME Experiment config c-vector model density model Datasets to score model</description></item><item><title/><link>https://ilskr-docs.github.io/ilskr-docs/notes/mainblocks/density-or-mass-models-training/Scrolingchosen/Metrics/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ilskr-docs.github.io/ilskr-docs/notes/mainblocks/density-or-mass-models-training/Scrolingchosen/Metrics/</guid><description>FIXME mean relative abs err mean relative err point count rate less then 3.5% point count rate less then 5% density_slope density_slope_fit density_variation err std Each metrics is scored on whole dataset, and 3 parts separately (~ 0-15 ages, 16-30 ages, 30+ ages)</description></item><item><title/><link>https://ilskr-docs.github.io/ilskr-docs/notes/mainblocks/density-or-mass-models-training/Scrolingchosen/Output/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ilskr-docs.github.io/ilskr-docs/notes/mainblocks/density-or-mass-models-training/Scrolingchosen/Output/</guid><description>FIXME dataset with calculated new density values and errors figs metrics (stores in postgres: density_model_metrics table) Output visual content</description></item><item><title/><link>https://ilskr-docs.github.io/ilskr-docs/notes/mainblocks/density-or-mass-models-training/Scrolingchosen/Pipeline/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ilskr-docs.github.io/ilskr-docs/notes/mainblocks/density-or-mass-models-training/Scrolingchosen/Pipeline/</guid><description>FIXME Initialize config from config file Load all metrics from PostgresDB for specified params: datasets of interest (usually full) metrics of interest (names from available SummaryGeneratorConfig.</description></item><item><title>Configuration</title><link>https://ilskr-docs.github.io/ilskr-docs/notes/config/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ilskr-docs.github.io/ilskr-docs/notes/config/</guid><description>Configuration Quartz is designed to be extremely configurable. You can find the bulk of the configuration scattered throughout the repository depending on how in-depth you&amp;rsquo;d like to get.</description></item></channel></rss>